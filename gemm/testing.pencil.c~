/* Need to create a single common 
*  header file which defines required utility functions 	
*  which helps in setting timers,dumping arrys to stdout etc...
*/
#include<stdio.h>
#include<pencil.h>
#include "gemm_pencil.h"
#define alpha 1
#define beta 1
//#define PENCIL_ARRAY static const restrict


void initialize_array(const int rowA,const int colA,
		      const int rowB,const int colB,
		      const int rowC,const int colC, 
		      DATATYPE A[PENCIL_ARRAY rowA][colA],
		      DATATYPE B[PENCIL_ARRAY rowB][colB],
		      DATATYPE C[PENCIL_ARRAY rowC][colC]);
//__attribute__( (ACCESS(summary_initialize_array)) );


void print_array(int rowC,int colC,
		 DATATYPE C[rowC][colC]);
//__attribute__( (ACCESS(summary_print_array)) );


void kernel_gemm(const int rowA,const int colA,
		 const int rowB,const int colB,
		 const int rowC,const int colC, 
		 DATATYPE A[PENCIL_ARRAY rowA][colA],
		 DATATYPE B[PENCIL_ARRAY rowB][colB],
		 DATATYPE C[PENCIL_ARRAY rowC][colC]);
//__attribute__( (ACCESS(summary_kernel_gemm)) );



/*

void summary_initialize_array(const int rowA, const int colA,
			      const int rowB, const int colB,
			      const int rowC, const int colC, 
			      DATATYPE A[PENCIL_ARRAY rowA][colA],
			      DATATYPE B[PENCIL_ARRAY rowB][colB],
			      DATATYPE C[PENCIL_ARRAY rowC][colC],
			      DATATYPE alpha[PENCIL_ARRAY 1],
			      DATATYPE beta[PENCIL_ARRAY 1])
{
	
	//	Summary function for initialize_array()
		
	__pencil_def(A);
	__pencil_def(B);
	__pencil_def(C);
	__pencil_def(alpha);
	__pencil_def(beta);
}
*/


void initialize_array(const int rowA,const int colA,
		      const int rowB,const int colB,
		      const int rowC,const int colC, 
		      DATATYPE A[PENCIL_ARRAY rowA][colA],
		      DATATYPE B[PENCIL_ARRAY rowB][colB],
		      DATATYPE C[PENCIL_ARRAY rowC][colC])
{
	int i, j;
  	for (i = 0; i < rowC; i++)
    		for (j = 0; j < colC; j++)
      			C[i][j] = ((DATATYPE) i*j) / DIV;
  	for (i = 0; i < rowA; i++)
    		for (j = 0; j < colA; j++)
      			A[i][j] = ((DATATYPE) i*j) / DIV;
  	for (i = 0; i < rowB; i++)
    		for (j = 0; j < colB; j++)
      			B[i][j] = ((DATATYPE) i*j) / DIV;
	//alpha[0]=1;
	//beta[0]=1;
}
/*
void summary_print_array(int rowC,int colC,DATATYPE C[rowC][colC])
{
	
	//	Summary function for print_array
	
	int i,j;
	for(i=0;i<rowC;i++)
		for(j=0;j<colC;j++)
			__pencil_use(C[i][j]);
}
*/
void print_array(int rowC,int colC,
		 DATATYPE C[rowC][colC])
{
	int i, j;
 	for (i = 0; i < rowC; i++)
  	{
    		for (j = 0; j < colC; j++) {
			//printf ("%d",C[i][j]);
    		}
  		printf("\n");
  	}
  	printf ("\n\n");
}
/*
void summary_kernel_gemm(const int rowA, const int colA,
			 const int rowB, const int colB,
			 const int rowC, const int colC, 
			 DATATYPE A[PENCIL_ARRAY rowA][colA],
			 DATATYPE B[PENCIL_ARRAY rowB][colB],
			 DATATYPE C[PENCIL_ARRAY rowC][colC],
			 DATATYPE alpha[PENCIL_ARRAY 1],
		      	 DATATYPE beta[PENCIL_ARRAY 1])
{
	int i;
	for (i = 0; i < rowC; i++){
    		for (int j = 0; j < colC; j++)
      		{
			__pencil_use(C[i][j]);
			__pencil_def((((((C[i][j]);
			for (int k = 0; k < rowB; ++k)
	  		{
				__pencil_use(C[i][j]);
				__pencil_def((((((C[i][j]);
				__pencil_use(A[i][k]);
				__pencil_use(B[k][j]);
				__pencil_use(alpha[0]);
				__pencil_use(beta[0]);
			}
      		}
	}	
}
*/

void kernel_gemm(const int rowA,const int colA,
		 const int rowB,const int colB,
		 const int rowC,const int colC, 
		 DATATYPE A[PENCIL_ARRAY rowA][colA],
		 DATATYPE B[PENCIL_ARRAY rowB][colB],
		 DATATYPE C[PENCIL_ARRAY rowC][colC])
{
  int i;
  /* C := alpha*A*B + beta*C */
  #pragma pencil independent
  for (i = 0; i < rowC; i++)
    for (int j = 0; j < colC; j++)
      {
	C[i][j] *= beta;
	for (int k = 0; k < rowB; ++k)
	  C[i][j] += alpha * A[i][k] * B[k][j];
      }

}



int main()
{
	printf("in main");
	DATATYPE A[ROWA][COLA];
	DATATYPE B[ROWB][COLB];
	DATATYPE C[ROWC][COLC];
	printf("initing kernel");
	initialize_array(ROWA,COLA,ROWB,COLB,ROWC,COLC,A,B,C);
	/* Call to set timer function goes here */
	printf("starting kernel");
	kernel_gemm(ROWA,COLA,ROWB,COLB,ROWC,COLC,A,B,C);	
	//print_array(ROWC,COLC,C);
	printf("kernel end");
	return 0;
}
